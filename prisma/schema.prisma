generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  name       String
  password   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activeRole UserRole   @default(USER)
  roles      UserRole[] @default([])
  cart       Cart?
  orders     Order[]
  products   Product[]
  vendor     Vendor? // A user can have a vendor profile, but it is optional
  Review     Review[] // implicit relationship managed by prisma
}

model Vendor {
  vendorId     String   @id
  categoryId   Int
  businessName String
  category     Category @relation(fields: [categoryId], references: [id])
  user         User     @relation(fields: [vendorId], references: [id])

  @@unique([vendorId, categoryId]) // Ensures that a vendor can only have one category
}

model Category {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  vendor Vendor[] // A category can be associated with many vendors
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  imgType     ImgType
  imgUrl      String
  price       Float
  quantity    Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tags        Tag[] //implicit relation handled by prisma MANY-MANY
  vendorId    String
  cartItems   CartItem[]
  orderItems  OrderItem[]
  user        User        @relation(fields: [vendorId], references: [id])
  Review      Review[]

  @@unique([name, vendorId])
}

model Tag {
  id      Int     @id @default(autoincrement())
  name    String
  tagType TagType 

  Product Product[] //implicit relation handled by prisma MANY-MANY

  @@unique([name, tagType])
}

model Review {
  id        String  @id @default(cuid())
  content   String
  rating    Int
  productId String
  product   Product @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Order {
  id              String        @id @default(uuid())
  totalAmount     Float
  orderStatus     OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  shippingDetails String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  buyerId         String
  user            User          @relation(fields: [buyerId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  productId String
  orderId   String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  buyerId   String     @unique
  user      User       @relation(fields: [buyerId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  cartId    String
  productId String
  cart      Cart    @relation(fields: [cartId], references: [buyerId])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

enum UserRole {
  ADMIN
  USER
  VENDOR
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  FAILED
  SHIPPED
  DELIVERED
  RETURNED
}

enum ImgType {
  URL
  FILE
}

enum TagType {
  GeneralProductTags
  CategoryBasedTags
  ConditionBasedTags
  SeasonalTags
  PriceBasedTags
  UsageBasedTags
  DemographicTags
  MaterialQualityTags
  AdminTags
  FunctionalTags
  Others
}
